<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\devportal_api_reference\Plugin\MigrationConfigDeriver;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;

/**
 * Provides the list of API Reference related node bundles.
 *
 * @return array
 *   An array of node bundles.
 */
function devportal_api_reference_bundles() {
  return ['api_ref_swagger_20'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function devportal_api_reference_form_node_api_ref_swagger_20_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'devportal_api_reference_api_ref_swagger_20_validate';
}

/**
 * Custom validation function api_ref_swagger_20 node bundle.
 *
 * @param array $form
 *   The form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state object.
 */
function devportal_api_reference_api_ref_swagger_20_validate(array $form, FormStateInterface $form_state) {
  try {
    $swagger = NULL;
    $source = $form_state->getValue('field_source_file');
    if ($fid = isset($source[0]["fids"][0]) ? $source[0]["fids"][0] : NULL) {
      $file = File::load($fid);
      $swagger = MigrationConfigDeriver::parseSwagger($file->getFileUri());
      $form_state->setValue('title', $swagger['info']['title']);
      $form_state->setValue('field_version', $swagger['info']['version']);
      $form_state->setValue('field_description', $swagger['info']['description']);
    }
  }
  catch (\Exception $e) {
    \Drupal::messenger()->addError($e->getMessage());
    $form_state->unsetValue('field_source_file');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\devportal_api_reference\Plugin\Swagger20ValidationException
 */
function devportal_api_reference_form_node_api_ref_swagger_20_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'devportal_api_reference_api_ref_swagger_20_edit_form_validate';
  /** @var \Drupal\node\Entity\Node $node */
  $node = $form_state->getFormObject()->getEntity();

  // Check the triggering element. If the triggering element is a link the
  // triggering element property will be set to null. If it is from an AJAX
  // request (in this case clicking the 'browse' button and uploading a file) it
  // will have an object assigned to it. By default set the default_value to
  // null.
  $triggering_element = $form_state->getTriggeringElement();
  if ($triggering_element === NULL) {
    $form["field_source_file"]["widget"][0]["#default_value"] = NULL;
  }

  // Get the revisions of this node, and create an array of the files contained
  // in these revisions. This array will be used to populate the 'Previously
  // uploaded files' fieldset.
  $previous_files = devportal_api_reference_get_previous_files($node->id());

  // Create the 'Previously uploaded files' fieldset and populate it with the
  // files from the $previous_files array.
  $form['previous_files'] = [
    '#type' => 'details',
    '#weight' => -2,
    '#title' => t('Previously uploaded files'),
    '#open' => TRUE,
  ];
  /** @var \Drupal\file\FileInterface $file */
  foreach ($previous_files as $file) {
    $swagger = MigrationConfigDeriver::parseSwagger($file->getFileUri());
    $form['previous_files'][] = [
      '#theme' => 'file_link',
      '#file' => $file,
      '#description' => Html::escape("{$file->getFilename()} ({$swagger['info']['version']})"),
      '#cache' => [
        'tags' => $file->getCacheTags(),
      ],
    ];
  }
}

/**
 * Validation function for api_ref_swagger_20_edit_form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state object.
 *
 * @return void|boolean
 */
function devportal_api_reference_api_ref_swagger_20_edit_form_validate(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $form_state->getFormObject()->getEntity();

  $source = $form_state->getValue('field_source_file');
  $swagger = NULL;
  try {
    if ($fid = isset($source[0]["fids"][0]) ? $source[0]["fids"][0] : NULL) {
      $file = File::load($fid);
      $swagger = MigrationConfigDeriver::parseSwagger($file->getFileUri());
    }

    if (devportal_api_reference_check_api_version($node, $swagger['info']['version'])) {
      \Drupal::messenger()->addError('This version has been added before.');
      $form_state->unsetValue('field_source_file');
      return NULL;
    }
  }
  catch (\Exception $e) {
    \Drupal::messenger()->addError($e->getMessage());
    $form_state->unsetValue('field_source_file');
  }

  try {
    if ($fid = isset($source[0]["fids"][0]) ? $source[0]["fids"][0] : NULL) {
      $file = File::load($fid);
      $swagger = MigrationConfigDeriver::parseSwagger($file->getFileUri());
      $form_state->setValue('title', $swagger['info']['title']);
      $form_state->setValue('field_version', $swagger['info']['version']);
      $form_state->setValue('field_description', $swagger['info']['description']);
    }
  }
  catch (\Exception $e) {
    \Drupal::messenger()->addError($e->getMessage());
    $form_state->unsetValue('field_source_file');
  }
}

/**
 * Checks whether a given API documentation version already exist or not.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The API Reference node entity.
 * @param $version
 *   The API version to check.
 *
 * @return boolean
 *   Returns TRUE if the given API version already exist. Returns FALSE
 *   otherwise.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\devportal_api_reference\Plugin\Swagger20ValidationException
 */
function devportal_api_reference_check_api_version(\Drupal\node\Entity\Node $node, $version) {
  $previous_files = devportal_api_reference_get_previous_files($node->id());
  foreach ($previous_files as $file) {
    $previous_file = MigrationConfigDeriver::parseSwagger($file->getFileUri());
    if ($version === $previous_file['info']['version']) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns the files previously added to the node.
 *
 * @param int $nid
 *   The node ID.
 *
 * @return array|null
 *   An array of objects containing the previously added files.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function devportal_api_reference_get_previous_files($nid) {
  $previous_files = NULL;
  $query = \Drupal::entityQuery('node');
  $revision_ids = $query
    ->condition('nid', $nid)
    ->allRevisions()
    ->execute();
  foreach ($revision_ids as $vid => $nid) {
    /** @var \Drupal\node\NodeInterface $revision */
    $revision = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadRevision($vid);
    $source = $revision->get('field_source_file')->getValue();
    if (!empty($source)) {
      $previous_files[] = File::load($source[0]["target_id"]);
    }
  }
  return $previous_files;
}
