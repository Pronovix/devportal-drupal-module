<?php

/**
 * @file
 * Main module file for Devportal Docs.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\devportal_api_reference\Entity\APIRef;
use Drupal\devportal_api_reference\Plugin\MigrationConfigDeriver;

/**
 * Implements hook_entity_base_field_info().
 */
function devportal_api_entities_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'api_ref') {
    $fields['api_doc_ref'] = BaseFieldDefinition::create('entity_reference_revisions')
      ->setLabel('API Documentation')
      ->setSettings([
        'target_type' => 'api_doc',
      ])
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'entity_reference_revisions_entity_view',
        'weight' => 2,
      ])
      ->setDisplayOptions('form', [
        'region' => 'hidden',
        'weight' => 2,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function devportal_api_entities_entity_api_ref_predelete(EntityInterface $entity) {
  // Delete all API Documentation related entities.
  foreach (devportal_api_entities_get_api_content_entity_types() as $entity_type) {
    // TODO: It would be better to do this in a batch or something like that,
    // TODO: but for now a simple iteration is enough.
    $query = \Drupal::entityQuery($entity_type);
    $query->condition('api_ref', $entity->id());
    $entity_type_entity_ids = $query->execute();
    $entity_type_storage_handler = \Drupal::entityTypeManager()->getStorage($entity_type);
    $entity_type_entities = $entity_type_storage_handler->loadMultiple($entity_type_entity_ids);
    $entity_type_storage_handler->delete($entity_type_entities);
  }

  // Delete migration configurations from cache.
  /** @var \Drupal\Core\Cache\CacheBackendInterface $cache */
  $cache = \Drupal::service('cache.discovery_migration');
  $cache->delete('migration_plugins');

  // Delete migration group configuration.
  \Drupal::configFactory()->getEditable("migrate_plus.migration_group.devportal_api_entities_{$entity->migrationID()}")->delete();

  // Drop migrate map and message tables (yes, they need to be removed
  // manually) @see https://www.drupal.org/node/2713327.
  foreach (['migrate_map', 'migrate_message'] as $table_type) {
    $table_expression = "{$table_type}_devportal_api_entities__{$entity->migrationID()}%";
    $migration_tables = Database::getConnection()->schema()->findTables($table_expression);
    foreach ($migration_tables as $table) {
      Database::getConnection()->schema()->dropTable($table);
    }
  }
}

/**
 * Implements hook_api_ref_migration_after_callbacks().
 *
 * @throws \Drupal\devportal_api_reference\Plugin\Swagger20ValidationException
 */
function devportal_api_entities_api_ref_migration_after_callbacks($id): array {
  /** @var \Drupal\devportal_api_reference\Entity\APIRef $ref */
  $ref = APIRef::load($id);
  return [
    [
      '_devportal_api_entities_update_api_ref_after_migration',
      [$id, MigrationConfigDeriver::getVersionFromAPIRef($ref)],
    ],
  ];
}

/**
 * Updates an API Reference entity after migration.
 *
 * This function runs after migration and performs updates on a API Reference
 * entity.
 *
 * @param int $api_ref_id
 *   The current API Reference id.
 * @param string $api_version
 *   Imported API version.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _devportal_api_entities_update_api_ref_after_migration(int $api_ref_id, string $api_version) {
  /** @var \Drupal\devportal_api_reference\Entity\APIRef $api_ref */
  $api_ref = APIRef::load($api_ref_id);

  // Connect the imported API Documentation entity to the API Reference entity.
  try {
    $tableSuffix = MigrationConfigDeriver::tableSuffixForBundle($api_ref->getType());
    $ids = \Drupal::database()->query("
          SELECT r.id AS id, r.vid AS vid
          FROM {api_doc_field_revision} r
          JOIN {migrate_map_devportal_api_reference__{$api_ref->migrationID()}_api_doc_{$tableSuffix}} m
            ON r.id = m.destid1
          JOIN {api_version_tag_field_data} d
            ON d.id = r.api_version_tag
          WHERE d.name = :api_version
        ", [':api_version' => $api_version])
      ->fetchAssoc();

    if ($ids) {
      /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $api_doc_ref */
      $api_doc_ref = $api_ref->get('api_doc_ref');
      $api_doc_ref->setValue([
        'target_id' => $ids['id'],
        'target_revision_id' => $ids['vid'],
      ]);
    }
  }
  catch (\Exception $ex) {
    watchdog_exception('devportal_api_entities', $ex);
  }

  $api_ref->save();
}

/**
 * Implements hook_api_reference_migrations().
 */
function devportal_api_entities_api_reference_migrations(APIRef $apiref, $path, $base_plugin_definition) {
  $name = $apiref->migrationID();
  $api_ref_id = $apiref->id();
  $base_id = $base_plugin_definition['id'];
  $group = "devportal_api_entities_{$name}";
  $prefix = $name;

  $unprocessed_migrations = [
    _devportal_api_entities_api_param_item($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_mime_type_taxonomy_term($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_ext_doc($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_tag($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_version_tag($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_info($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_contact($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_license($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_doc($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_path_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_global_schema($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_schema($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_body_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_query_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_header_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_form_data_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_meta_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_global_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_param($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_endpoint($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_endpoint_set($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_response($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_response_header($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_response_set($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_global_response($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_method($prefix, $group, $base_id, $api_ref_id),
    _devportal_api_entities_api_response_example($prefix, $group, $base_id, $api_ref_id),
  ];

  $migrations = [];
  foreach ($unprocessed_migrations as $migration) {
    $migration['source']['source_file'] = $path;
    $migration['source']['api_ref_id'] = $api_ref_id;
    $migrations[$migration['id']] = $migration;
  }

  return $migrations;
}

/**
 * Implements hook_help().
 */
function devportal_api_entities_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the devportal_api_entities module.
    case 'help.page.devportal_api_entities':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('') . '</p>';
      return $output;

    default:
  }

  return NULL;
}

/**
 * Gets the list of API content entity types this module defines.
 *
 * @return array
 *   An array of defined API content entity types EXCEPT api_ref.
 */
function devportal_api_entities_get_api_content_entity_types() {
  return [
    'api_doc',
    'api_body_param',
    'api_contact',
    'api_endpoint',
    'api_endpoint_set',
    'api_ext_doc',
    'api_form_data_param',
    'api_global_param',
    'api_global_schema',
    'api_header_param',
    'api_license',
    'api_meta_param',
    'api_method',
    'api_param',
    'api_param_item',
    'api_path_param',
    'api_query_param',
    'api_response',
    'api_response_example',
    'api_response_header',
    'api_response_set',
    'api_global_response',
    'api_schema',
    'api_tag',
    'api_version_tag',
    'api_info',
  ];
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function devportal_api_entities_menu_links_discovered_alter(&$links) {
  foreach (devportal_api_entities_get_api_content_entity_types() as $entity_type) {
    // Add links to each entity type.
    foreach (\Drupal::entityTypeManager()
               ->getStorage("{$entity_type}_type")
               ->loadMultiple() as $type) {
      $links["entity.{$entity_type}.add." . $type->id()] = [
        'title' => t($type->label()),
        'route_name' => "entity.{$entity_type}.add_form",
        'parent' => "entity.{$entity_type}.add_page",
        'route_parameters' => ["{$entity_type}_type" => $type->id()],
      ];
    }
  }
}

/**
 * Implements hook_entity_bundle_create().
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function devportal_api_entities_entity_bundle_create($entity_type_id, $bundle) {
  // When an API Doc bundle is created, we should create such a bundle in all
  // other entity types of ours that might have a bundle. Do not create bundles
  // during installation because we also have exported bundle configurations.
  if (($entity_type_id == 'api_doc') && !drupal_installation_attempted()) {
    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_types = array_diff(devportal_api_entities_get_api_content_entity_types(), ['api_doc']);

    // Retrieve the name of the just-created API Doc bundle.
    $name = $entity_type_manager->getStorage('api_doc_type')
      ->load($bundle)
      ->label();

    // Create a bundle in all the above-listed entity types.
    foreach ($entity_types as $entity_type) {
      // Retrieve the definition (ie. the annotation info) of the current
      // (content) entity type...
      $entity_type_definition = $entity_type_manager->getDefinition($entity_type);
      // ...to know the entity type serving as the bundle on it.
      $bundle_entity_type_id = $entity_type_definition->getBundleEntityType();
      // Then retrieve the definition (ie. the annotation info) of the bundle
      // (config) entity type...
      $bundle_entity_type_definition = $entity_type_manager->getDefinition($bundle_entity_type_id);
      // ...to be able to actually create the bundle. OTOH, if there's a bundle
      // with that ID (machine name) already, we shouldn't create it, not even
      // touch it.
      if ($entity_type_manager->getStorage($bundle_entity_type_id)
        ->load($bundle)) {
        continue;
      }
      $new_bundle = $entity_type_manager->getStorage($bundle_entity_type_id)
        ->create([
          $bundle_entity_type_definition->getKey('label') => $name,
          $bundle_entity_type_definition->getKey('id') => $bundle,
        ]);
      $new_bundle->save();
    }
  }
}

/**
 * Returns a list of available API Documentation type names.
 *
 * This list can include types that are queued for addition or deletion.
 *
 * @return string[]
 *   An array of API Documentation type labels, keyed by the API Documentation
 *   type name.
 */
function devportal_api_entities_api_doc_type_get_names() {
  return array_map(function ($bundle_info) {
    return $bundle_info['label'];
  }, \Drupal::entityManager()->getBundleInfo('api_doc'));
}

/**
 * Marks a API Documentation to be re-indexed by the api_doc_search plugin.
 *
 * @param int $api_doc_id
 *   The API Documentation ID.
 */
function devportal_api_entities_reindex_api_doc_search($api_doc_id) {
  if (\Drupal::moduleHandler()->moduleExists('search')) {
    // Reindex API Documentation context indexed by the devportal_api_entities module
    // API Documentation search plugin.
    search_mark_for_reindex('api_doc_search', $api_doc_id);
  }
}

/**
 * Implements hook_theme().
 */
function devportal_api_entities_theme($existing, $type, $theme, $path) {
  $entity_types = devportal_api_entities_get_api_content_entity_types();

  $theme = [];
  foreach ($entity_types as $entity_type) {
    $theme[$entity_type] = [
      'render element' => 'elements',
      'file' => $entity_type . '.page.inc',
      'template' => strtr($entity_type, '_', '-'),
    ];
  }

  $theme['api_method_navigation_block'] = [
    'render element' => 'elements',
    'variables' => [
      'tags' => [],
    ],
    'template' => 'api-method-navigation-block',
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_ref(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIRef $entity */
  $entity = $variables['elements']['#api_ref'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_doc(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIDoc $entity */
  $entity = $variables['elements']['#api_doc'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_body_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIBodyParam $entity */
  $entity = $variables['elements']['#api_body_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_contact(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIContact $entity */
  $entity = $variables['elements']['#api_contact'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_endpoint(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIEndpoint $entity */
  $entity = $variables['elements']['#api_endpoint'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_endpoint_set(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIEndpointSet $entity */
  $entity = $variables['elements']['#api_endpoint_set'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_ext_doc(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIExtDoc $entity */
  $entity = $variables['elements']['#api_ext_doc'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_form_data_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIFormDataParam $entity */
  $entity = $variables['elements']['#api_form_data_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_global_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIGlobalParam $entity */
  $entity = $variables['elements']['#api_global_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_global_schema(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIGlobalSchema $entity */
  $entity = $variables['elements']['#api_global_schema'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_header_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIHeaderParam $entity */
  $entity = $variables['elements']['#api_header_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_license(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APILicense $entity */
  $entity = $variables['elements']['#api_license'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_meta_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIMetaParam $entity */
  $entity = $variables['elements']['#api_meta_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_method(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIMethod $entity */
  $entity = $variables['elements']['#api_method'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIParam $entity */
  $entity = $variables['elements']['#api_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_param_item(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIParamItem $entity */
  $entity = $variables['elements']['#api_param_item'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_path_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIPathParam $entity */
  $entity = $variables['elements']['#api_path_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_query_param(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIQueryParam $entity */
  $entity = $variables['elements']['#api_query_param'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_response(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIResponse $entity */
  $entity = $variables['elements']['#api_response'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_response_example(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIResponseExample $entity */
  $entity = $variables['elements']['#api_response_example'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_response_header(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIResponseHeader $entity */
  $entity = $variables['elements']['#api_response_header'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_response_set(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIResponseSet $entity */
  $entity = $variables['elements']['#api_response_set'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_global_response(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIGlobalResponse $entity */
  $entity = $variables['elements']['#api_global_response'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_schema(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APISchema $entity */
  $entity = $variables['elements']['#api_schema'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_tag(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APITag $entity */
  $entity = $variables['elements']['#api_tag'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_version_tag(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIVersionTag $entity */
  $entity = $variables['elements']['#api_version_tag'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function devportal_api_entities_theme_suggestions_api_info(array $variables) {
  $suggestions = [];
  /** @var \Drupal\devportal_api_entities\Entity\APIInfo $entity */
  $entity = $variables['elements']['#api_info'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = $entity->getEntityTypeId() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id();
  $suggestions[] = $entity->getEntityTypeId() . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_views_data_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function devportal_api_entities_views_data_alter(array &$data) {
  // Entity reference base fields should have a reverse relationship in Views
  // (just like the sitebuilder-added entity reference fields have), not only
  // a forward relationship.
  // @see core_field_views_data()
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $entity_types = $entity_type_manager->getDefinitions();
  foreach ($entity_types as $source_entity_type_id => $source_entity_type) {
    // Handle only our own entity types as source.
    if ($source_entity_type->getProvider() != 'devportal_api_entities') {
      continue;
    }
    // Handle only content entity types as source.
    if (!($source_entity_type instanceof ContentEntityType)) {
      continue;
    }
    $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions($source_entity_type_id);
    foreach ($base_field_definitions as $base_field_id => $base_field_definition) {
      // Handle only entity reference fields.
      if ($base_field_definition->getType() != 'entity_reference') {
        continue;
      }
      /** @var \Drupal\Core\Field\TypedData\FieldItemDataDefinition $item_definition */
      $item_definition = $base_field_definition->getItemDefinition();
      $field_definition = $item_definition->getFieldDefinition();
      $field_storage = $field_definition->getFieldStorageDefinition();
      $target_entity_type_id = $field_storage->getSetting('target_type');
      $target_entity_type = $entity_type_manager->getDefinition($target_entity_type_id);
      // Handle only our own entity types as target.
      if ($target_entity_type->getProvider() != 'devportal_api_entities') {
        continue;
      }
      // Handle only content entity types as target.
      if (!($target_entity_type instanceof ContentEntityType)) {
        continue;
      }

      // Here comes the heart of the dance.
      $pseudo_field_name = 'reverse__' . $source_entity_type_id . '__' . $base_field_id;
      $args = [
        '@label' => $target_entity_type->getLabel(),
        '@field_name' => $base_field_definition->getName(),
        '@entity' => $source_entity_type->getLabel(),
      ];
      // The sitebuilder-added entity reference fields have the same storage
      // schema regardless their cardinality. Sadly, this is not true for entity
      // reference base fields: multi-value fields (ones with cardinality != 1)
      // have a link table between the source and the target entities (just like
      // sitebuilder-added fields have one regardless their cardinality).
      if ($base_field_definition->isMultiple()) {
        $views_table = $target_entity_type->getDataTable();
        $field_table = $source_entity_type_id . '__' . $base_field_id;
        $field_field = $base_field_id . '_' . $base_field_definition->getMainPropertyName();
        $data[$views_table][$pseudo_field_name]['relationship'] = [
          'title' => t('@entity using @field_name', $args),
          'label' => t('Rev: @entity', $args),
          'group' => $target_entity_type->getLabel(),
          'help' => t('Relate each @entity with the @field_name field set to the @label.', $args),
          'id' => 'entity_reverse',
          'base' => $source_entity_type->getDataTable(),
          //'entity_type' => $source_entity_type_id,
          'base field' => $source_entity_type->getKey('id'),
          //'base field' => 'entity_id',
          'field_name' => $source_entity_type_id . '_' . $base_field_id,
          'field table' => $field_table,
          'field field' => $field_field,
          'join_extra' => [
            [
              'field' => 'deleted',
              'value' => 0,
              'numeric' => TRUE,
            ],
          ],
        ];
      }
      else {
        $field_table = $target_entity_type->getDataTable();
        $field_field = $base_field_id;
        // Cannot use the `entity_reverse` @ViewsRelationship handler plugin here,
        // since it always creates two JOINS, which is totally unneeded for
        // single-value baseFields, because their value is available right away on
        // the entity_type_field_data table.
        $data[$field_table][$pseudo_field_name]['relationship'] = [
          'title' => t('@entity using @field_name', $args),
          'label' => t('Rev: @entity', $args),
          'group' => $target_entity_type->getLabel(),
          'help' => t('Relate each @entity with the @field_name field set to the @label.', $args),
          'id' => 'standard',
          'base' => $source_entity_type->getDataTable() ?: $source_entity_type->getBaseTable(),
          'entity type' => $target_entity_type_id,
          'base field' => $base_field_id,
          'relationship field' => $target_entity_type->getKey('id'),
        ];
      }
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 *
 * @param array $variables
 */
function template_preprocess_api_ref_add_list(&$variables) {
  $variables['types'] = [];
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      /** @var $type \Drupal\devportal_api_reference\Entity\APIRefType */
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => \Drupal\Core\Link::createFromRoute($type->label(), 'entity.api_ref.add', [
          'api_ref_type' => $type->id(),
        ]),
        'description' => [
          '#markup' => $type->description,
        ],
      ];
    }
  }
}

function _devportal_api_entities_api_param_item($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_param_item_swagger_20",
    "label" => "Swagger 2.0 Items Objects to APIParamItem entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_param_item_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_param_item",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "param_type" => "type",
      "format" => "format",
      "collection_format" => "collection_format",
      "param_default" => "default",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_param_item" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "source" => "items",
      ],
      "extensions" => "extensions",
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_mime_type_taxonomy_term($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_mime_type_taxonomy_term_swagger_20",
    "label" => "Swagger 2.0 mime types to taxonomy terms in API MIME Type vocabulary",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_mime_type_swagger_20",
    ],
    "destination" => [
      "plugin" => "entity:taxonomy_term",
      "default_bundle" => "api_mime_type",
    ],
    "process" => [
      "name" => "mime_type",
    ],
  ];
}

function _devportal_api_entities_api_ext_doc($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_ext_doc_swagger_20",
    "label" => "Swagger 2.0 External Documentation Objects to APIExtDoc entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_ext_doc_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_ext_doc",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "url" => "url",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_tag($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_tag_swagger_20",
    "label" => "Swagger 2.0 Tag to APITag entity",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_tag_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_tag",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "extensions" => "extensions",
      "api_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_doc_swagger_20",
        "source" => "api_ref_id",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_ext_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "source" => "ext_doc",
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_doc_swagger_20",
        "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_version_tag($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_version_tag_swagger_20",
    "label" => "API Documentation versions to APIVersionTag entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_version_tag_swagger_20",
    ],
    "destination" => [
      "plugin" => "entity:api_version_tag",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
  ];
}

function _devportal_api_entities_api_info($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_info_swagger_20",
    "label" => "Swagger 2.0 Info Object to APIInfo entity",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_info_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_info",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "title" => "title",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "terms_of_service" => "terms_of_service",
      "api_contact" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_contact_swagger_20",
        "source" => "contact",
      ],
      "api_license" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_license_swagger_20",
        "source" => "license",
      ],
      "version" => "version",
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_contact_swagger_20",
        "{$base_id}:{$prefix}_api_license_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_contact($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_contact_swagger_20",
    "label" => "Swagger 2.0 Contact Object to APIContact entity",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_contact_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_contact",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "url" => "url",
      "mail" => "email",
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_license($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_license_swagger_20",
    "label" => "Swagger 2.0 License Object to APILicense entity",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_license_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_license",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "url" => "url",
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_doc($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_doc_swagger_20",
    "label" => "Swagger 2.0 Object to APIDoc entity",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_doc_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_doc",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "host" => "host",
      "base_path" => "base_path",
      "protocol" => "protocol",
      "consumes" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "source" => "consumes",
      ],
      "produces" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "source" => "produces",
      ],
      "source_file" => [
        [
          "plugin" => "getcontents",
          "source" => [
            "source_file",
            "destination_file",
          ],
          "rename" => TRUE,
        ],
        [
          "plugin" => "entity_generate",
        ],
      ],
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_ext_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "source" => "ext_doc",
      ],
      "api_info" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_info_swagger_20",
        "source" => "api_ref_id",
      ],
      "uid" => [
        "plugin" => "default_value",
        "default_value" => 1,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
      "status" => [
        "plugin" => "default_value",
        // TODO: Fix this when the revisioning support is complete.
        "default_value" => 1,
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "{$base_id}:{$prefix}_api_info_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_path_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_path_param_swagger_20",
    "label" => "Swagger 2.0 \"Path\" type Parameter Objects to APIPathParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_path_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_path_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "required" => "required",
      "param_type" => "type",
      "format" => "format",
      "collection_format" => "collection_format",
      "param_default" => "default",
      "api_param_item" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "source" => "items",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_global_schema($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_global_schema_swagger_20",
    "label" => "Swagger 2.0 Schema Objects to APIGlobalSchema entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_global_schema_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_global_schema",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "value" => "value",
      "api_ext_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "source" => "ext_doc",
      ],
      "api_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_doc_swagger_20",
        "source" => "api_ref_id",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "{$base_id}:{$prefix}_api_doc_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_schema($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_schema_swagger_20",
    "label" => "Swagger 2.0 Schema Objects to APISchema entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_schema_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_schema",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "schema_id" => "source_key",
      "inline_schema_def" => "inline_schema",
      "api_global_schema" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_global_schema_swagger_20",
        "source" => "global_schema",
      ],
      "api_ext_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "source" => "ext_doc",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_global_schema_swagger_20",
        "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_body_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_body_param_swagger_20",
    "label" => "Swagger 2.0 \"Body\" type Parameter Objects to APIBodyParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_body_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_body_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "required" => "required",
      "api_schema" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_schema_swagger_20",
        "source" => "schema",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_schema_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_query_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_query_param_swagger_20",
    "label" => "Swagger 2.0 \"Query\" type Parameter Objects to APIQueryParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_query_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_query_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "required" => "required",
      "allow_empty_value" => "allow_empty_value",
      "param_type" => "type",
      "format" => "format",
      "collection_format" => "collection_format",
      "param_default" => "default",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_param_item" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "source" => "items",
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_header_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_header_param_swagger_20",
    "label" => "Swagger 2.0 \"Header\" type Parameter Objects to APIHeaderParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_header_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_header_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "required" => "required",
      "param_type" => "type",
      "format" => "format",
      "collection_format" => "collection_format",
      "param_default" => "default",
      "api_param_item" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "source" => "items",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_form_data_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_form_data_param_swagger_20",
    "label" => "Swagger 2.0 \"Form\" type Parameter Objects to APIFormDataParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_form_data_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_form_data_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "required" => "required",
      "allow_empty_value" => "allow_empty_value",
      "param_type" => "type",
      "format" => "format",
      "collection_format" => "collection_format",
      "param_default" => "default",
      "api_param_item" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "source" => "items",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_meta_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_meta_param_swagger_20",
    "label" => "Swagger 2.0 Parameter Objects to APIMetaParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_meta_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_meta_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "param_in" => "in",
      "api_path_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_path_param_swagger_20",
        "source" => "path_param",
      ],
      "api_body_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_body_param_swagger_20",
        "source" => "body_param",
      ],
      "api_query_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_query_param_swagger_20",
        "source" => "query_param",
      ],
      "api_header_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_header_param_swagger_20",
        "source" => "header_param",
      ],
      "api_form_data_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_form_data_param_swagger_20",
        "source" => "form_data_param",
      ],
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_path_param_swagger_20",
        "{$base_id}:{$prefix}_api_body_param_swagger_20",
        "{$base_id}:{$prefix}_api_query_param_swagger_20",
        "{$base_id}:{$prefix}_api_header_param_swagger_20",
        "{$base_id}:{$prefix}_api_form_data_param_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_global_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_global_param_swagger_20",
    "label" => "Swagger 2.0 Parameter Objects to APIGlobalParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_global_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_global_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "api_meta_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_meta_param_swagger_20",
        "source" => "meta_param",
      ],
      "api_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_doc_swagger_20",
        "source" => "api_ref_id",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_meta_param_swagger_20",
        "{$base_id}:{$prefix}_api_doc_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_param($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_param_swagger_20",
    "label" => "Swagger 2.0 Parameter and Reference Objects to APIParam entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_param_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_param",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "api_global_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_global_param_swagger_20",
        "source" => "global_param",
      ],
      "api_meta_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_meta_param_swagger_20",
        "source" => "meta_param",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_global_param_swagger_20",
        "{$base_id}:{$prefix}_api_meta_param_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_endpoint($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_endpoint_swagger_20",
    "label" => "Swagger 2.0 Paths Object entries to APIEndpoint entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_endpoint_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_endpoint",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "uri" => "uri",
      "extensions" => "extensions",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_swagger_20",
        "source" => "params",
      ],
      "api_endpoint_set" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_endpoint_set_swagger_20",
        "source" => "api_ref_id",
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_param_swagger_20",
        "{$base_id}:{$prefix}_api_endpoint_set_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_endpoint_set($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_endpoint_set_swagger_20",
    "label" => "Swagger 2.0 Paths Objects to APIEndpointSet entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_endpoint_set_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_endpoint_set",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "extensions" => "extensions",
      "api_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_doc_swagger_20",
        "source" => "api_ref_id",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_doc_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_response($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_response_swagger_20",
    "label" => "Swagger 2.0 Response and Reference Objects to APIResponse entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_response_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_response",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "code" => "code",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_schema" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_schema_swagger_20",
        "source" => "api_schema",
      ],
      "api_response_set" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_response_set_swagger_20",
        "source" => "api_response_set",
      ],
      "api_global_response" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_global_response_swagger_20",
        "source" => "api_global_response",
      ],
      "extensions" => "extensions",
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_schema_swagger_20",
        "{$base_id}:{$prefix}_api_response_set_swagger_20",
        "{$base_id}:{$prefix}_api_global_response_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_response_header($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_response_header_swagger_20",
    "label" => "Swagger 2.0 Header Objects to APIResponseHeader entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_response_header_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_response_header",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "param_type" => "type",
      "name" => "name",
      "description" => "description",
      "format" => "format",
      "collection_format" => "collection_format",
      "param_default" => "default",
      "api_param_item" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "source" => "items",
      ],
      "api_response" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_response_swagger_20",
        "source" => "response",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "extensions" => "extensions",
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_param_item_swagger_20",
        "{$base_id}:{$prefix}_api_response_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_response_set($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_response_set_swagger_20",
    "label" => "Swagger 2.0 Responses Objects to APIResponseSet entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_response_set_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_response_set",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "api_method" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_method_swagger_20",
        "source" => "api_method",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "extensions" => "extensions",
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_method_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_global_response($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_global_response_swagger_20",
    "label" => "Swagger 2.0 Response Objects to APIGlobalResponse entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_global_response_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_global_response",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "name" => "name",
      "description" => "description",
      "extensions" => "extensions",
      "api_schema" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_schema_swagger_20",
        "source" => "api_schema",
      ],
      "api_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_doc_swagger_20",
        "source" => "api_ref_id",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_schema_swagger_20",
        "{$base_id}:{$prefix}_api_doc_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_method($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_method_swagger_20",
    "label" => "Swagger 2.0 Operation Objects to APIMethod entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_method_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_method",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "http_method" => "http_method",
      "summary" => "summary",
      "description/format" => [
        "plugin" => "default_value",
        "default_value" => "github_flavored_markdown",
      ],
      "description/value" => "description",
      "op_id" => "operation_id",
      "deprecated" => "deprecated",
      "consumes" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "source" => "consumes",
      ],
      "produces" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "source" => "produces",
      ],
      "api_ext_doc" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "source" => "ext_doc",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "api_endpoint" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_endpoint_swagger_20",
        "source" => "endpoint",
      ],
      "api_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_tag_swagger_20",
        "source" => "tags",
      ],
      "api_param" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_param_swagger_20",
        "source" => "params",
      ],
      "extensions" => "extensions",
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "{$base_id}:{$prefix}_api_ext_doc_swagger_20",
        "{$base_id}:{$prefix}_api_endpoint_swagger_20",
        "{$base_id}:{$prefix}_api_tag_swagger_20",
        "{$base_id}:{$prefix}_api_param_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

function _devportal_api_entities_api_response_example($prefix, $group, $base_id, $api_ref_id) {
  return [
    "id" => "{$prefix}_api_response_example_swagger_20",
    "label" => "Swagger 2.0 Example Objects to APIResponseExample entities",
    "migration_tags" => [
      "Swagger",
    ],
    "migration_group" => $group,
    "source" => [
      "plugin" => "dp_api_response_example_swagger_20",
    ],
    "destination" => [
      "plugin" => "devportal_api_entities_entity:api_response_example",
    ],
    "process" => [
      "type" => [
        "plugin" => "default_value",
        "default_value" => "swagger_2_0",
      ],
      "example" => "example",
      "api_response" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_response_swagger_20",
        "source" => "response",
      ],
      "api_ref" => [
        "plugin" => "default_value",
        "default_value" => $api_ref_id,
      ],
      "produces" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "source" => "produces",
      ],
      "api_version_tag" => [
        "plugin" => "migration_lookup",
        "migration" => "{$base_id}:{$prefix}_api_version_tag_swagger_20",
        "source" => "api_version",
      ],
      "langcode" => [
        "plugin" => "default_value",
        "source" => "language",
        "default_value" => "en",
      ],
    ],
    "migration_dependencies" => [
      "required" => [
        "{$base_id}:{$prefix}_api_response_swagger_20",
        "{$base_id}:{$prefix}_api_mime_type_taxonomy_term_swagger_20",
        "{$base_id}:{$prefix}_api_version_tag_swagger_20",
      ],
    ],
  ];
}

