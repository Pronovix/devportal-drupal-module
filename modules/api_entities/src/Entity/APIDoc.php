<?php

namespace Drupal\devportal_api_entities\Entity;

use Drupal\Core\Entity\EditorialContentEntityBase;
use Drupal\Core\Entity\EntityChangedTrait;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\devportal_api_entities\APIDocInterface;
use Drupal\devportal_api_entities\Traits\AutoLabelTrait;
use Drupal\devportal_api_entities\Traits\ConsumesTrait;
use Drupal\devportal_api_reference\Traits\APIRefTrait;
use Drupal\devportal_api_entities\Traits\APIExtDocRefTrait;
use Drupal\devportal_api_entities\Traits\ProducesTrait;
use Drupal\devportal\Traits\URLRouteParametersTrait;
use Drupal\devportal_api_entities\Traits\VendorExtensionTrait;
use Drupal\user\UserInterface;
use Drupal\devportal_api_entities\Traits\APIVersionTagRefTrait;

/**
 * Defines the API Documentation entity class.
 *
 * @ContentEntityType(
 *   id = "api_doc",
 *   label = @Translation("API Documentation"),
 *   handlers = {
 *     "storage" = "Drupal\devportal_api_entities\APIDocStorage",
 *     "list_builder" = "Drupal\devportal_api_entities\APIDocListBuilder",
 *     "view_builder" = "Drupal\devportal\DevportalContentEntityViewBuilder",
 *     "views_data" = "Drupal\devportal_api_entities\APIDocViewsData",
 *     "form" = {
 *       "default" = "Drupal\devportal_api_entities\APIDocForm",
 *       "add" = "Drupal\devportal_api_entities\APIDocForm",
 *       "edit" = "Drupal\devportal_api_entities\APIDocForm",
 *       "delete" = "Drupal\devportal\Form\DevportalContentEntityDeleteForm",
 *     },
 *     "inline_form" = "Drupal\devportal_api_entities\Form\DevportalInlineForm",
 *     "route_provider" = {
 *       "html" = "Drupal\devportal_api_entities\APIDocHtmlRouteProvider",
 *     },
 *     "access" = "Drupal\devportal_api_entities\APIDocAccessControlHandler",
 *     "translation" = "Drupal\devportal_api_entities\APIDocTranslationHandler",
 *   },
 *   admin_permission = "administer api docs",
 *   fieldable = TRUE,
 *   base_table = "api_doc",
 *   data_table = "api_doc_field_data",
 *   field_ui_base_route = "entity.api_doc_type.edit_form",
 *   entity_keys = {
 *     "id" = "id",
 *     "bundle" = "type",
 *     "uuid" = "uuid",
 *     "revision" = "vid",
 *     "langcode" = "langcode",
 *     "label" = "auto_label",
 *     "published" = "status",
 *   },
 *   api_extra_info = {
 *     "auto_label" = {
 *       "auto_label" = "auto_label",
 *       "autogenerated_label" = "autogenerated_label",
 *     },
 *     "vendor_extension" = "extensions",
 *     "produces" = "produces",
 *     "consumes" = "consumes",
 *     "api_ref" = "api_ref",
 *     "api_ext_doc" = "api_ext_doc",
 *     "api_version_tag" = "api_version_tag",
 *   },
 *   bundle_entity_type = "api_doc_type",
 *   bundle_label = @Translation("API Documentation type"),
 *   revision_table = "api_doc_revision",
 *   revision_data_table = "api_doc_field_revision",
 *   show_revision_ui = TRUE,
 *   revision_metadata_keys = {
 *     "revision_user" = "revision_user",
 *     "revision_created" = "revision_created",
 *     "revision_log_message" = "revision_log",
 *   },
 *   links = {
 *     "canonical" = "/api_doc/{api_doc}",
 *     "add-page" = "/api_doc/add",
 *     "add-form" = "/api_doc/add/{api_doc_type}",
 *     "edit-form" = "/api_doc/{api_doc}/edit",
 *     "delete-form" = "/api_doc/{api_doc}/delete",
 *     "collection" = "/admin/content/api_doc",
 *     "version-history" = "/api_doc/{api_doc}/revisions",
 *     "revision" = "/api_doc/{api_doc}/revisions/{api_doc_revision}/view",
 *     "revision_revert" = "/api_doc/{api_doc}/revisions/{api_doc_revision}/revert",
 *     "revision_delete" = "/api_doc/{api_doc}/revisions/{api_doc_revision}/delete",
 *     "multiple_delete_confirm" = "/admin/content/api_doc/delete",
 *     "translation_revert" = "/api_doc/{api_doc}/revisions/{api_doc_revision}/revert/{langcode}",
 *   },
 *   translatable = TRUE,
 * )
 */
class APIDoc extends EditorialContentEntityBase implements APIDocInterface {

  use EntityChangedTrait;
  use AutoLabelTrait;
  use VendorExtensionTrait;
  use ProducesTrait;
  use ConsumesTrait;
  use APIRefTrait;
  use APIExtDocRefTrait;
  use APIVersionTagRefTrait;
  use URLRouteParametersTrait;

  /**
   * {@inheritdoc}
   */
  public function getHost() {
    return $this->get('host')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function setHost($host) {
    $this->set('host', $host);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function getBasePath() {
    return $this->get('base_path')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function setBasePath($base_path) {
    $this->set('base_path', $base_path);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function getProtocol() {
    return $this->get('protocol')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function setProtocol($protocol) {
    $this->set('protocol', $protocol);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function getSourceFile() {
    return $this->get('source_file')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function setSourceFile($source_file) {
    $this->set('source_file', $source_file);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function getOwner() {
    return $this->get('uid')->entity;
  }

  /**
   * {@inheritdoc}
   */
  public function getOwnerId() {
    return $this->getEntityKey('uid');
  }

  /**
   * {@inheritdoc}
   */
  public function setOwnerId($uid) {
    $this->set('uid', $uid);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function setOwner(UserInterface $account) {
    $this->set('uid', $account->id());
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function preSave(EntityStorageInterface $storage) {
    parent::preSave($storage);

    foreach (array_keys($this->getTranslationLanguages()) as $langcode) {
      $translation = $this->getTranslation($langcode);

      // If no owner has been set explicitly, make the anonymous user the owner.
      if (!$translation->getOwner()) {
        $translation->setOwnerId(0);
      }
    }

    // If no revision author has been set explicitly, make the node owner the
    // revision author.
    if (!$this->getRevisionUser()) {
      $this->setRevisionUserId($this->getOwnerId());
    }

    // Generate auto label.
    $this->autoLabelPreSave();
  }

  /**
   * {@inheritdoc}
   */
  public function preSaveRevision(EntityStorageInterface $storage, \stdClass $record) {
    parent::preSaveRevision($storage, $record);

    if (!$this->isNewRevision() && isset($this->original) && (!isset($record->revision_log) || $record->revision_log === '')) {
      // If we are updating an existing APIDoc without adding a new revision, we
      // need to make sure $entity->revision_log is reset whenever it is empty.
      // Therefore, this code allows us to avoid clobbering an existing log
      // entry with an empty one.
      $record->revision_log = $this->original->revision_log->value;
    }
  }

  /**
  * {@inheritdoc}
  */
  public function postSave(EntityStorageInterface $storage, $update = TRUE) {
    parent::postSave($storage, $update);

    // Reindex the API Documentation when it is updated. The API Documentation
    // is automatically indexed when it is added, simply by being added to the
    // api_doc table.
    if ($update) {
      devportal_api_entities_reindex_api_doc_search($this->id());
    }
  }

  /**
   * {@inheritdoc}
   */
  public static function preDelete(EntityStorageInterface $storage, array $entities) {
    parent::preDelete($storage, $entities);

    // Ensure that all API Documentations deleted are removed from the search
    // index.
    if (\Drupal::moduleHandler()->moduleExists('search')) {
      foreach ($entities as $entity) {
        search_index_clear('api_doc_search', $entity->id());
      }
    }
  }

  /**
   * {@inheritdoc}
   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
   */
  public function generateAutoLabel() {
    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $info_first */
    $info_first = $this->get('api_info')->first();
    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $info_first_entity */
    $info_first_entity = $info_first->get('entity');
    /** @var \Drupal\devportal_api_entities\Entity\APIInfo $info */
    $info = $info_first_entity->getTarget()->getValue();

    return $info->getTitle() . ' - v' . $info->getVersion();
  }

  /**
   * {@inheritdoc}
   */
  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
    $fields = parent::baseFieldDefinitions($entity_type);
    $fields['status']
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 120,
      ])
      ->setDisplayConfigurable('form', TRUE);

    // Add the auto label field.
    $fields += static::autoLabelBaseFieldDefinitions($entity_type);

    // Add the vendor extension fields.
    $fields += static::vendorExtensionBaseFieldDefinitions($entity_type);

    // Add the API Ref field.
    $fields += static::apiRefBaseFieldDefinitions($entity_type);
    $fields['api_ref']->setDescription(t('API Reference referenced from API Documentation.'));

    // Add the produces fields.
    $fields += static::producesBaseFieldDefinitions($entity_type);

    // Add the consumes fields.
    $fields += static::consumesBaseFieldDefinitions($entity_type);

    // Add the API External Documentation field.
    $fields += static::apiExtDocBaseFieldDefinitions($entity_type);
    $fields['api_ext_doc']->setDescription(t('API External Documentation referenced from API Documentation.'));

    // Add the API Version Tag field.
    $fields += static::apiVersionTagBaseFieldDefinitions($entity_type);
    $fields['api_version_tag']->setDescription(t('API Version Tag referenced from API Documentation.'));

    $fields['id']->setDescription(t('The API Documentation ID.'));

    $fields['uuid']->setDescription(t('The API Documentation UUID.'));

    $fields['vid']->setDescription(t('The API Documentation revision ID.'));

    $fields['langcode']->setDescription(t('The API Documentation language code.'));

    $fields['host'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Host'))
      ->setRevisionable(TRUE)
      // URIs are not length limited by RFC 2616, but we can only store 255
      // characters in our comment DB schema.
      ->setSetting('max_length', 255)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['base_path'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Base path'))
      ->setRevisionable(TRUE)
      ->setSetting('max_length', 255)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['protocol'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Protocol'))
      ->setRevisionable(TRUE)
      ->setSettings([
        'allowed_values' => [
          'http' => 'HTTP',
          'https' => 'HTTPS',
          'ws' => 'WS',
          'wss' => 'WSS',
        ],
      ])
      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'options_buttons',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['source_file'] = BaseFieldDefinition::create('file')
      ->setLabel(t('Source file'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setSettings([
        'uri_scheme' => 'public',
        'file_extensions' => 'yml yaml xml json',
        'file_directory' => 'api_doc',
      ])
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'file_generic',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['uid'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Author'))
      ->setDescription(t('The username of the API Documentation author.'))
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'user')
      // This is fine since we depend on the node module.
      ->setDefaultValueCallback('Drupal\node\Entity\Node::getCurrentUserId')
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'author',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => -5,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['api_info'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Info'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDescription('API Info referenced from API Documentation.')
      ->setSettings([
        'target_type' => 'api_info',
        'handler' => 'default',
        'handler_settings' => [
          'sort' => [
            'field' => '_none',
          ],
          'auto_create' => FALSE,
          'auto_create_bundle' => '',
        ],
      ])
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'entity_reference_label',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'inline_entity_form_complex',
        'weight' => 5,
        'settings' => [
          'form_mode' => 'default',
          'override_labels' => TRUE,
          // @FIXME Should these use $this->>t()?
          'label_singular' => 'info',
          'label_plural' => 'infos',
          'allow_new' => TRUE,
          'allow_existing' => TRUE,
          'match_operator' => 'CONTAINS',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['changed'] = BaseFieldDefinition::create('changed')
      ->setLabel(t('Changed'))
      ->setDescription(t('The time that the API Documentation was last edited.'))
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE);

    return $fields;
  }

  /**
   * {@inheritdoc}
   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
   */
  public function label() {
    $label = parent::label();
    if (empty($label)) {
      $label = $this->generateAutoLabel();
    }
    return $label;
  }

}
